Upoznavanje sa alatima Moose i SonarQ.
TRazenje adekvatnog projekta za analizu.

sve slike koje pominjem u tekstu nalaze se u folderu images

-------------------------------------------------------------------------------------------------------------------------------------------------
openmrs

Projekat sa kojim zapocinjem analizu je poprilicno velik, ima 1120 klasa, 3512 atributa, 15282 metode... 
Projekat je parsiran u .mse fajl pomocu VerveineJ pasera i importovan u Moose.
POmocu Queries Browser-a mozemo kreirati razlicite upite i vrsiti selekciju za dalju analizu.

Kada u upitu selektujemo svih 1120 klasa i otvorimo arhitectural map mozemo dodati veze nasledjivanja i tako analizirati dubinu nasedjivanja medju klasama. 
Vidimo da je klasa BaseContextSensitiveText klasa koja se najvise nasledjuje, odnosno druge klase koriste njene metode ili ih prosiruju. 
Kada malo bolje pogledamo koje klase nasledjuju klasu BaseContextSensitiveText vidimo da su to sve Test klase.
Jos neke klase koje se najvise nasledjuju: BaseOpenmrsObject, BaseOpenmrsService, BaseChangableOpenmrsMetadata.
Kada dodamo podupit da selektujemo sve Test klase mozemo videti da preko 50% Test klasa nasledjuje klasu BaseContextSensitiveText.

Kada upitom selektujemo pakete mozemo videti da je sav kod organizovan u dva glavna paketa liquibase i org. Iz slike mozemo da vidimo hijerarhiju nasledjivanja medju paketima.
Paket liquibase nasledjuje elemente paketa org, odnosno paket liquibase.ext.change nasledjuje paket org.openmrs koji je najveci paket u projektu. Mozemo videti da dalje taj paket nasledjuje klasu DispatcherServlet iz paketa org.springframework.web.servlet.

U Butterfly map mozemo videti strukturu jedne klase, sa leve strane vidimo sve tipove koji koriste zadatu klasu a sa leve sta se sve nalazi u toj klasi (ko zavisi od nje i od koga ona zavisi).
Projekat koji sam pocela da analiziram izgleda nije dobro parsiran i cini mi se da ce biti prevelik za analizu. 

------------------------------------------------------------------------------------------------------------------------------------------------
joda-time

za pocetak uocavam da je Moose alat koji se fokusira na analizu slo≈æenosti klasa, metoda, broj metoda po klasi, broj linija po metodi, generalno analizu softverske arhitekture, dok SonarQube ima fokus na statickoj analzi, slozenost koda, duplikacije, broj linija, f-ja, klasa, pokrivenost testovima itd.

Zapocinjem analizu sa drugim projektom koji deluje da je bolje parsiran i malo je manji od prethodnog.

Moose pokazuje da projekat ima 12 paketa sto mozemo videti selektovanjem paketa u Query Browseru dok u sonarQube pakete moramo da prebrojavamo rucno. Upitom selektujem sve pakete i prikazem ih u Architectural map mogu da vidim da je glavni paket org u njemu se nalazi paket joda u kom se nalaze paketi example i time. Paket example takodje ima paket time.
U sonarQube vidimo malo drugaciju organizaciju, glavni paket je src, paket example/org/joda/example/time je ekvivalentan paketu org/joda/example/time u Moose, paketi changes i site se ne nalazu u Moose, unutar paketa main nalaze se paketi assembly i checkstyle koji se takodje ne nalaze u Moose, i paket java/org/joda/time koji je ekvivalentan paketu org/joda/time u Moose. 
U sonarQube takodje postoji paket test/java/org/joda/time koji je u Moose alatu takodje org/joda/time.
Vidimo malo drugaciju strukturu paketa buduci da neki paketi ne postoje u Moose analizi. Jedina veca razlika je sto se sve test klase unutar glavnog paketa, a ne u odvojenom test paketu.
Unutar distribution map mozemo jasno videti velicinu paketa, najveci paket je time buduci da se u njemu nalaze i test klase.

Sto se nasledjivanja tice koje mozemo videti selektovanjem FamixTInheritance veze, nema nasledjivanja izmedju paketa org, joda, example i example.time, ali unutar samog paketa time ima dosta veza nasledjivanja.
Kako bi se fokusirala iskljucivo na paket time, dodajem child query koji izdvaja samo taj paket po nazivu. Iz slike mozemo da vidimo da je najvise strelica upereno na paket base, sto znaci da velik broj elemenata nasledjuje ovaj paket, takodje jos jedan paket koji ima upecatljiv broj veza nasledjivanja je field.
UsonarQube ne postoji opcija analize veza nasledjivanja.

Sto se klasa tice, Moose prepoznaje 528 razlicitih klasa, dok SonarQube broji 478 klasa. U Moose alatu mozemo videti veze nasledjivanja medju klasama, dok sonarQube ne nudi tu opciju.
U sonarQube mozemo da vidimo da se u paketu example/org/joda/example/time nalazi 5 klasa, dok ekvivalentan paket org/joda/example/time u Moose takodje ima 5 klasa, od cega se unutar klase DateTimeBrowser nalazi 13 klasa, isto to pokazuje i Moose. 
Ova klasa ukazuje na visok nivo slozenosti, teska je za razumevanje, odrzavanje i testiranje, pre svega narusava Single Responsibility Principle gde bi svaka klasa trebalo da ima jednu jasno definisanu odgovornost, a i ponovna upotreba koda je znatno otezana.
Dalje, 243 klase se nalaze unuatar paketa main/java/org/joda/time sto je ekvivalentno org/joda/time iz Moose analize gde se rezultati relativno poklapaju. Daljom analizom vidim da i klasa DateTimeFormaterBuilder ima 15 klasa. 
Paket test/java/org/joda/time ima 214 klasa, u kom sve klase deluju dobro struktuirane i sadrze svega nekoliko klasa u sebi, u Moose alatu sve ove klase obuhvacene su unutar org/joda/time paketa.

U Moose alatu mozemo detaljno da analiziramo pomenutu klasu DateTimeBrowser unutar Butterfly map i vidimo da klasu ne koristi ni jedan objekat, a da se u njoj nalazi jako velik broj klasa ,metoda itd. Sa druge strane pomenuta klasa DateTimeFormatterBuilder ima jako puno elemenata i sa jedne i sa druge strane. Ovakav vizuelni prikaz ne moze se videti u sonarQube.

kako izgleda query koji u  mooose pokazuje klase unutar klase?

Unutar system complexity u Moose alatu mozemo videti broj metoda, broj atributa i broj linija koda jedne klase. Boja kvadratica predstavlja broj linija koda, tamnija boja predstavlja vise linija, dok svetlija manje.
Na prvi pogled moze da se vidi da su najtamnije klase: DateTime, LocalDate, DateTimeZoneBuilder, LocalDateTime, ISODateTimeFormat, DateTimeFormatterBuilder i PeriodFormatterBuilder. Isti rezultat dobijamo i u sonarQube ali ne postoji opcija vizuelnog prikaza, i neophodno je rucno pretraziti svaku klasu u hijerarhiji i pogledati broj linija koda koji se u njoj nalaze. 
Definitivno je pristup koji nudi Moose laksi za citanje i razumevanje.

Visinom kvadratica predstavljen je broj metoda klase, mozemo jasno videti da su najvisi kvadratici zapravo klase: DateTime, LocalDate, LocalDateTime, ISODateTimeFormat, TestLocalDateTime_Basics, TestLocalDate_Basics, DateTimeFormatterBuilder, TestDateTimeZoneCutover, TestPeriodConstructors i Period. 
Dok u sonarQube uporedjivanjem brojki ne primecujem klasu Period jer ima svega 86 metoda naspram 100+ motoda koje imaju ostale navedene klase, nego klasu PeriodFormatterBuider koju ne primecujem u Moose alatu.
Daljim istrazivanjem pronalazim klasu PeriodFormatterBuider u Moose alatu i privlacim je klasi Period, iz slike jasno moze da se vidi da je klasa Period(u sonarQube 86 metoda) predstavljena znatno visim kvadraticem u odnosu na PeriodFormatterBuider(u sonarQube 120 metoda).
Takodje, u Moose alatu klasa LocalDateTime ima 120 metoda dok u sonarQube ima 139, DateTime ima 108 a u sonarQube 127, klasa LocalDate u Moose 97, dok u sonarQube 115. Iz ovoga vidimo da alati ne prebrojavaju metode na isti nacin.
Daljim uporedjivanjem, primecujem da klase TestLocalDateTime_Basics i TestLocalDate_Basics nisam izdvojila u sonaQube analizi, buduci da imaju 79 i 92 metode(opet u poredjenju sa 100+ koje imaju ostale navedene klase). 
Pronalazim te klasse u Moose i uporedjujem ih sa PeriodFormatterBuider(u sonarQube 120 metoda), iz slike se jasno vidi da su obe klase predstavljene kao mnogo vise od PeriodFormatterBuider klase.

Sto se broja atributa tice, sonarQube nema opciju pregleda broja atributa, dok je u Moose alatu broj atributa predstavljen sirinom kockica, neke klase koje mogu da izdvojim su PeriodFormatterBuider, AssembeledChronology, Constants, DateTimeFieldType, PeriodType.
U podesavanjima je moguce promeniti kriterijume za visinu, sirinu i boju kvadratica. 
Kada primenim numberOfComments na visinu kvadratica zapazam klasu LoadedFile kao klasu sa najvecim brojem komentara(iako u inspectoru pise da je broj komentara 5), dok je to u sonarQube klasa DateTime sa 1215 linija komentara. 
Kako bih uporedila broj komentara klase LoadedFile pokusala sam da je nadjem u sonarQube, ali ona tamo ne postoji(kao sto se moze videti sa slike). Kada otvorim inspector za klasu DateTime moze se videti da ona ima samo 2 komentara, za raliku od 1215 u sonarQube.

U Moose alatu postoji distribution map gde mozemo da vidimo svih 528 klasa kao "kucice" gde prozorcici predstavljaju atribute i metode, ovo nam omogucava jako dobar vizuelni prikaz svih klasa u projektu i lako mozemo porediti velicinu klasa.
U sonarQube alatu ovakva analiza bi bila mnogo teza buduci da ne postoji zapis o broju atributa unutar klase, a da bi uporedili broj metoda mooramo ulaziti rucno u svaki paket i gledati koja klasa ima koji broj metoda i tako vrsiti poredjenje velicine klasa celog projekta.
Takodje, jako korisna mapa je Co Usage Map u kojoj mozemo da vidimo sve klase i metode kao "kucice" koje su cak i poredjane po velicini od najvece, sto dosta moze da pomogne u vizualizaciji velicine klasa i metoda velikih projekata.
Metode i atributi su predstavljeni kao "prozori" gde prevlacenjem misa preko njih mozemo jasno da vidimo koje sve druge klase i metode koriste isti taj metod/atribut na koji pokazujemo, takodje jako korisna stvar. U sonarQube da bi poredili velicinu neke klase ili paketa, moramo rucno traziti za svaku klasu broj metoda, linija koda itd.

------------------------------------------------------------------------------------------------------------------------------------------------
petclinic

zapocinjem analizu na jos manjem projektu kako bih videla da li se ponavljaju iste razlike

Selektovanjem paketa u Queries Browseru i prikazivanjem u Architectural map mogu da vidim organizaciju paketa ovog projekta. Kao i kod prethodnog glavni paket je org, a u njemu se nalaze springframework/samples/petclinic u kome se dalje nalaze paketi vet, system, service, owner i model.
Moose prepoznaje ukupno 9 paketa. Sto se tice sonarQube glavni paket je opet src i u njemu se nalaze checkstyle, main i test/java/org/springframework/samples/petclinic. Unutar paketa checkstyle kao i kod prethodnog projekta nalaze se samo xml dokumenti sto moze biti razlog sto ga Moose ne prepoznaje ni u ovom slucaju.
Unutar main paketa nalaze se paketi resources, scss i java/org/springframework/samples/petclinic. Unutar paketa resources i scss nalaze se css, scss, html i properties fajlovi koje Moose izgleda ne prepoznaje.
Kao i u pretpodnom primeru paket src/main/java/org/springframework/samples/petclinic u Moose je prestavljen kao org/springframework/samples/petclinic, odnosno buduci da se u paketima src/main/java ne nalaze java fajlovi koje Moose prepoznaje ti paketi ni ne postoje.
I u ovom slucaju sonarQube prepoznaje poseban paket za testove test/java/org/springframework/samples/petclinic koji se u Moose ponovo nalaze u peketu org/springframework/samples/petclinic.
Glavna razlika koju mozemlo da vidimo je da Moose ne prepoznaje fajlove koji nisu java, i samim tim odbacuje pakete u kojima se nalaze samo ti fajlovi. Druga razlika je sto ne prepoznaje test paket koji je iste strukture kao glavni paket gde se nalaze sve java klase samo sto je obuhvacen paketom test.

Sto se klasa tice Moose prepoznaje 41 klasu, dok sonarQube prepoznaje 40. Dubljim istrazivanjem mozemo videti da Moose zapravo prepoznaje 38 klasa buduci da ostale 3 koje razuna su anonymous i zapravo nisu klase, sto je verovatno zasluga parsera.
Buduci da se radi o malom broju klasa lako je zakljuciti da dve klase koje se ne nalaze u Moose su OwnerRepository i VetRepository buduci da to zapravo nisu java lase vec interfejsi, koji se u Moose alatu nalaze jasno pod tipom interfejs.
Kada su u pitanju veci projekti u kome se nalazi veci broj interfejsa ovaj propust moze dati losu sliku o broju klasa i ovim se moze preuvelicati slozenost projekta buduci da interfejsi ne sadrze implementaciju.

Za uporedjivanje broja metoda koristim System Complexiti koji na vizuelni nacin prikazuje jasnu sliku velicine i kompleksnosti klasa u ovom slucaju.
Jasno se vidi da klase Owner i OwnerControllerTests imaju isti broj metoda buduci da su iste visine, a u inspektoru se mozemo uveriti u to gde stoji da obe klase imaju 15 metoda. U sonarQube klasa Owner ima 13 metoda dok klasa OwnerControllerTests ima 14.
Sa slike se jasno vidi da klasa OwnerControllerTests broji i metod <initializer> koji predstavlja konstruktor koji on broji cak i ako eksplicitno nije definisan, podrazumevani konstruktor se automatski generise. Isti slucaj je i za klasu Owner.
Jos jedna klasa koja vidljivo ima veci broj metoda od ostalih je OwnerController sa 13 metoda, koja u sonarQube ima 12 iz istog razloga kao i prethodne jer Moose broji i <intializer> kao metod iako taj konstruktor nije eksplicitno definisan.
Klasa koja ima najmanji broj metoda je definitivno TestConfiguration koja zapravo nema ni jedan metod u oba alata.
Moose alat broji 168 metoda, a sonarQube 156, gde je razlika u <initializer> metodama.

Broj linija definisan je bojom klase, najtamnije klase su ClinicServiceTests i OwnerControllerTests, sto se poklapa sa sonarQube gde te klase imaju 229 i 233 linije. 
Ostale upadljive klase su PetController, OwnerController i Owner, sto se takodje poklapa sa sonarQube analizom gde imaju 163, 166 i 175. 
Opet u Moose alatu smo jasno mogli da uporedimo broj metoda i linija koda unuat klasa dok u sonarQube to zahteva trazenje svake klase pojedinacno i uporedjivanjebrojki.

Kada promenim podesavanja Sysyem Complexity-a mogu da vidim broj linija komentara. Jasno se moze videti da vecina klasa ima jednak broj komentara sto u inspectoru stoji da je 2.
U sonarQube broj komentara je raznovrsan. Kada u inspectoru pogledam koje komentare Moose broji zapazam da Moose broji samo komentare koji se nalaze iznad klase, odnosno koji su vezani za klasu, sto ima smisla buduci da su u ovom slucaju selektovane klase u upitu u cilj je vizualizacija klasa.
Vracam se na predjasnji projekat i vidim da je razlika u broju komentara koja je bila drasticna u poredjenju ova dva alata upravo to da Moose broji komentare koji se nalaze iznad klase odnosno koji se odnose na nju.
Buduci da se komentari ovde odnose samo na klase s tim da su klase bile selektovane za system complexity, kao i bilo gde desnim klikom na klasu mozemo da je prosirimo sa Expand gde vidimo sve metode.
Kaa inspectujemo metod jasno vidimo razlicit broj komentara koji zaista jesu vezani iskljucivo za taj metod kao sto se moze videti na slikama. Mislim da je ovaj vidim prikaza komentara mnogo bolji i jasniji jer se za svaki metod i svaku klasu zasebno prikazuju komentari vezani za nju i nema potrebe da se ulazi u izvorni kod i trazi svaki komenatr.

Kada se vratim na klase iz proslog projekta gde je bila drasticna razlika u broju klasa mogu da vidim da Moose broji jako velik broj TestCase i TestSuite klasa. Selektovanjem bilo kog paketa moze se jasno videti da se u skoro svakom nalaze te dve klase po vise puta.
Kada se udje u bilo koju test klasu vidim da sve one nasledjuju klase TestCase ili TestSuite.
Razlog zasto Moose broji te klase moze biti to sto u objektno-orijentisanim sistemima kada jedna klasa nasledjuje drugu, roditeljska klasa se tretira kao deo hijerarhije nasledjivanja, i klase koje ih nasledjuju zavise od njih.
Takodje, postoji velik broj anonymous klasa koje su najverovatnije greska parsera.

Sto se tice metoda iz proslog primera u Moose alatu pokazuje 10301 dok u sonarQube 9834. Vodeci se zakljuckom iz ovog primera, proveravam broj <initializer> metoda jednostavnim upitom. Lako se vidi da u projektu ima 294 takve metode.
I kada se oduzme tih 294 metode i dalje postoji znacajna razlika. 
Analizom nekih pojedinacnih klasa mogu da zakljucim da sonarQube broji metode klase tako sto u njih ubraja i metode ugnjezdenih klasa. 
Moose unutar system complexity-a (u kom sam i poredila broj metoda) posebno broji metode svake klase sto je mnogo logicnije i ;preglednije. 
Tako da, klase koje sam izdvojila u proslom primeru da imaju drasticnu razliku u broju metoda imaju ugnjezdene klase cije metode sonarQube broji kao metode glavne klase.
Dok na primer u queries browseru mozemo da vidimo broj metoda citave klase zajedno sa ugnjezdenim klasama kao kod sonaQube, ali tu i dalje postoji razlika u broju metoda. Analizom izvornoh koda mogu da zakljucim da sonarQube iz nekog razloga ne broji sve metode unutar klase.
Jos jedna mana je to sto nigde nije navedeno koje metode su uracunate a koje ne, dok u Moose alatu mozemo videti naziv svih metoda koje se nalaze u pojedinacnim klasama.
