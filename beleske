Upoznavanje sa alatima Moose i SonarQ.
TRazenje adekvatnog projekta za analizu.

sve slike koje pominjem u tekstu nalaze se u folderu images

Projekat sa kojim zapocinjem analizu je poprilicno velik, ima 1120 klasa, 3512 atributa, 15282 metode... 
Projekat je parsiran u .mse fajl pomocu VerveineJ pasera i importovan u Moose.
POmocu Queries Browser-a mozemo kreirati razlicite upite i vrsiti selekciju za dalju analizu.

Kada u upitu selektujemo svih 1120 klasa i otvorimo arhitectural map mozemo dodati veze nasledjivanja i tako analizirati dubinu nasedjivanja medju klasama. 
Vidimo da je klasa BaseContextSensitiveText klasa koja se najvise nasledjuje, odnosno druge klase koriste njene metode ili ih prosiruju. 
Kada malo bolje pogledamo koje klase nasledjuju klasu BaseContextSensitiveText vidimo da su to sve Test klase.
Jos neke klase koje se najvise nasledjuju: BaseOpenmrsObject, BaseOpenmrsService, BaseChangableOpenmrsMetadata.
Kada dodamo podupit da selektujemo sve Test klase mozemo videti da preko 50% Test klasa nasledjuje klasu BaseContextSensitiveText.

Kada upitom selektujemo pakete mozemo videti da je sav kod organizovan u dva glavna paketa liquibase i org. Iz slike mozemo da vidimo hijerarhiju nasledjivanja medju paketima.
Paket liquibase nasledjuje elemente paketa org, odnosno paket liquibase.ext.change nasledjuje paket org.openmrs koji je najveci paket u projektu. Mozemo videti da dalje taj paket nasledjuje klasu DispatcherServlet iz paketa org.springframework.web.servlet.

U Butterfly map mozemo videti strukturu jedne klase, sa leve strane vidimo sve tipove koji koriste zadatu klasu a sa leve sta se sve nalazi u toj klasi (ko zavisi od nje i od koga ona zavisi).
Projekat koji sam pocela da analiziram izgleda nije dobro parsiran i cini mi se da ce biti prevelik za analizu. 
------------------------------------------------------------------------------------------------------------------------------------------------
za pocetak uocavam da je Moose alat koji se fokusira na analizu slo≈æenosti klasa, metoda, broj metoda po klasi, broj linija po metodi, generalno analizu softverske arhitekture, dok SonarQube ima fokus na statickoj analzi, slozenost koda, duplikacije, broj linija, f-ja, klasa, pokrivenost testovima itd.

Zapocinjem analizu sa drugim projektom koji deluje da je bolje parsiran i malo je manji od prethodnog.

Moose pokazuje da projekat ima 12 paketa sto mozemo videti selektovanjem paketa u Query Browseru dok u sonarQube pakete moramo da prebrojavamo rucno, upitom selektujem sve pakete i prikazem ih u Architectural map mogu da vidim da je glavni paket org u njemu se nalazi paket joda u kom se nalaze paketi example i time. Paket example takodje ima paket time.
U sonarQube vidimo malo drugaciju organizaciju, glavni paket je src, paket example/org/joda/example/time je ekvivalentan paketu org/joda/example/time u Moose, paketi changes i site se ne nalazu u Moose, unutar paketa main nalaze se paketi assembly i checkstyle koji se takodje ne nalaze u Moose, i paket java/org/joda/time koji je ekvivalentan paketu org/joda/time u Moose. U sonarQube takodje postoji paket test/java/org/joda/time koji je u Moose alatu takodje org/joda/time.
Vidimo malo drugaciju strukturu paketa buduci da neki paketi ne postoje u Moose sto moze biti i rezultat parsiranja.

Sto se nasledjivanja tice koje mozemo videti selektovanjem FamixTInheritance veze, nema nasledjivanja izmedju paketa org, joda, example i example.time, ali unutar samog paketa time ima dosta veza nasledjivanja.
Kako bi se fokusirala iskljucivo na paket time, dodajem child query koji izdvaja samo taj paket po nazivu. Iz slike mozemo da vidimo da je najvise strelica upereno na paket base, sto znaci da velik broj elemenata nasledjuje ovaj paket, takodje jos jedan paket koji ima upecatljiv broj veza nasledjivanja je field.
Sa druge strane, sonarQube pokazuje malo drugaciju strukturu paketa, glavni folder je src, a u njemu se nalaze changes, example/org/joda/example/time, main(u koem se nalazi org/joda/time kao u Moose), site, test/java/org/joda/time.

Sto se klasa tice, Moose prepoznaje 528 razlicitih klasa, dok SonarQube broji 478 klasa. U Moose alatu mozemo videti veze nasledjivanja medju klasama, dok sonarQube ne nudi tu opciju.
U sonarQube mozemo da vidimo da se u paketu example/org/joda/example/time nalazi 5 klasa, dok ekvivalentan paket org/joda/example/time u Moose takodje ima 5 klasa, od cega se unutar klase DateTimeBrowser nalazi 13 klasa, isto to pokazuje i Moose. 
Ova klasa ukazuje na visok nivo slozenosti, teska je za razumevanje, odrzavanje i testiranje, pre svega narusava Single Responsibility Principle gde bi svaka klasa trebalo da ima jednu jasno definisanu odgovornost, a i ponovna upotreba koda je znatno otezana.
Dalje, 243 klase se nalaze unuatar paketa main/java/org/joda/time sto je ekvivalentno org/joda/time iz Moose analize gde se rezultati relativno poklapaju. Daljom analizom vidim da i klasa DateTimeFormaterBuilder ima 15 klasa. 
Paket test/java/org/joda/time ima 214 klasa, u kom sve klase deluju dobro struktuirane i sadrze svega nekoliko klasa u sebi, u Moose alatu sve ove klase obuhvacene su unutar org/joda/time paketa.

U Moose alatu mozemo detaljno da analiziramo klasu DateTimeBrowser unutar Butterfly map i vidimo da klasu ne koristi ni jedan objekat, a da se u njoj nalazi jako velik broj klasa ,metoda itd. Sa druge strane pomenuta klasa DateTimeFormatterBuilder ima jako puno elemenata i sa jedne i sa druge strane. Ovakav vizuelni prikaz ne moze se videti u sonarQube.

kako izgleda query koji u  mooose pokazuje ugnjezdene pakete i klase?

Unutar system complexity u Moose alatu mozemo videti broj metoda, broj atributa i broj linija koda jedne klase. Boja kvadratica predstavlja broj linija koda, tamnija boja predstavlja vise linija, dok svetlija manje.
Na prvi pogled moze da se vidi da su najtamnije klase: DateTime, LocalDate, DateTimeZoneBuilder, LocalDateTime, ISODateTimeFormat, DateTimeFormatterBuilder i PeriodFormatterBuilder. Isti rezultat dobijamo i u sonarQube ali ne postoji opcija vizuelnog prikaza, i neophodno je rucno pretraziti svaku klasu u hijerarhiji i pogledati broj linija koda koji se u njoj nalaze. Definitivno je pristup koji nudi Moose laksi za citanje i razumevanje.

Visinom kvadratica predstavljen je broj metoda klase, mozemo jasno videti da su najvisi kvadratici zapravo klase: DateTime, LocalDate, LocalDateTime, ISODateTimeFormat, TestLocalDateTime_Basics, TestLocalDate_Basics, DateTimeFormatterBuilder, TestDateTimeZoneCutover, TestPeriodConstructors i Period, dok u sonarQube uporedjivanjem brojki ne primecujem klasu Period jer ima svega 86 metoda naspram 100+ motoda koje imaju ostale navedene klase, nego klasu PeriodFormatterBuider koju ne primecujem u Moose alatu.
Daljim istrazivanjem pronalazim klasu PeriodFormatterBuider u Moose alatu i privlacim je klasi Period, iz slike jasno moze da se vidi da je klasa Period(u sonarQube 86 metoda) predstavljena znatno visim kvadraticem u odnosu na PeriodFormatterBuider(u sonarQube 120 metoda).
Takodje, u Moose alatu klada LocalDateTime ima 120 metoda dok u sonarQube ima 139, DateTime ima 108 a u sonarQube 127, klasa LocalDate u Moose 97, dok u sonarQube 115. Ovim vidimo da alati ne prebrojavaju metode na isti nacin.
Daljim uporedjivanjem, primecujem da klase TestLocalDateTime_Basics i TestLocalDate_Basics nisam izdvojila u sonaQube analizi, buduci da imaju 79 i 92 metode(opet u poredjenju sa 100+ koje imaju ostale navedene klase), pronalazim te klasse u Moose i uporedjujem ih sa PeriodFormatterBuider(u sonarQube 120 metoda), iz slike se jasno vidi da su obe klase predstavljene kao mnogo vise od PeriodFormatterBuider klase.

Sto se broja atributa tice, sonarQube nema opciju pregleda broja atributa, dok je u Moose alatu broj atributa predstavljen sirinom kockica, neke koje mogu da izdvojim PeriodFormatterBuider, AssembeledChronology, Constants, DateTimeFieldType, PeriodType.
U podesavanjima je moguce promeniti kriterijume za visinu, sirinu i boju kvadratica. Kada primenim numberOfComments zapazam klasu LoadedFile kao klasu sa najvecim brojem komentara(iako u inspectoru pise da je broj komentara 5), dok je to u sonarQube klasa DateTime sa 1215 linija komentara. Kako bih uporedila broj komentara klase LoadedFile pokusala sam da je nadjem u sonarQube, ali ona tamo ne postoji. Kada otvorim inspector za klasu DateTime moze se videti da ona ima samo 2 komentara, za raliku od 1215 u sonarQube.

U Moose alatu postoji distribution map gde mozemo da vidimo svih 528 klasa kao "kucice" gde prozorcici predstavljaju atribute i metode, ovo nam omogucava jako dobar vizuelni prikaz svih klasa u projektu i lako mozemo porediti velicinu klasa.
U sonarQube alatu ovakva analiza bi bila mnogo teza buduci da ne postoji zapis o broju atributa unutar klase, a da bi uporedili broj metoda mooramo ulaziti rucno u svaki paket i gledati koja klasa ima koji broj metoda i tako vrsiti poredjenje velicine klasa celog projekta.

